from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from datetime import date


# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å ‚Äî –≤—ã–±–æ—Ä –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
async def show_start_calendar(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üìÖ Select start date:")
    await callback.message.edit_reply_markup(reply_markup=await SimpleCalendar().start_calendar())
    await state.update_data(calendar_stage="start")


# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å ‚Äî –≤—ã–±–æ—Ä –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã
async def show_end_calendar(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üìÖ Select end date:")
    await callback.message.edit_reply_markup(reply_markup=await SimpleCalendar().start_calendar())
    await state.update_data(calendar_stage="end")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
async def process_calendar(callback: CallbackQuery, callback_data: SimpleCalendarCallback, state: FSMContext):
    selected_date = callback_data.date
    data = await state.get_data()
    stage = data.get("calendar_stage")

    if stage == "start":
        await state.update_data(start_date=selected_date)
        await show_end_calendar(callback, state)

    elif stage == "end":
        await state.update_data(end_date=selected_date)
        await callback.message.edit_text(f"Selected period:\nüìÖ {data['start_date']} to {selected_date}")
        # ‚ûï –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –ø–æ–∫–∞–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –¥–∏–∞–ø–∞–∑–æ–Ω
        # –Ω–∞–ø—Ä–∏–º–µ—Ä: await show_expense_history_for_range(callback, data['start_date'], selected_date)
